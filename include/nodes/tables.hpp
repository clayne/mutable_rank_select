#pragma once

#if defined(_MSC_VER)
#define ALIGNED(x) __declspec(align(x))
#else
#if defined(__GNUC__)
#define ALIGNED(x) __attribute__((aligned(x)))
#endif
#endif

#ifdef AVX_512
#define ALIGNEMENT ALIGNED(64)
#else
#define ALIGNEMENT ALIGNED(32)
#endif

namespace dyrs::tables::avx2 {

// used by node32
static const int64_t update_4_64[4 * 4 * 2] ALIGNEMENT = {

    0, +1, +1, +1, 0, 0, +1, +1, 0,
    0, 0,  +1, 0,  0, 0, 0,

    0, -1, -1, -1, 0, 0, -1, -1, 0,
    0, 0,  -1, 0,  0, 0, 0

};

// used by node64 and node32
static const int32_t update_8_32[(8 + 1) * 8 * 2] ALIGNEMENT = {

    +1, +1, +1, +1, +1, +1, +1, +1, 0,  +1, +1, +1, +1, +1, +1, +1, 0,  0,  +1,
    +1, +1, +1, +1, +1, 0,  0,  0,  +1, +1, +1, +1, +1, 0,  0,  0,  0,  +1, +1,
    +1, +1, 0,  0,  0,  0,  0,  +1, +1, +1, 0,  0,  0,  0,  0,  0,  +1, +1, 0,
    0,  0,  0,  0,  0,  0,  +1, 0,  0,  0,  0,  0,  0,  0,  0,

    -1, -1, -1, -1, -1, -1, -1, -1, 0,  -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1,
    -1, -1, -1, -1, -1, 0,  0,  0,  -1, -1, -1, -1, -1, 0,  0,  0,  0,  -1, -1,
    -1, -1, 0,  0,  0,  0,  0,  -1, -1, -1, 0,  0,  0,  0,  0,  0,  -1, -1, 0,
    0,  0,  0,  0,  0,  0,  -1, 0,  0,  0,  0,  0,  0,  0,  0

};

// used by node128
static const int16_t update_8_16[8 * 8 * 2] ALIGNEMENT = {

    0, +1, +1, +1, +1, +1, +1, +1, 0, 0, +1, +1, +1, +1, +1, +1, 0,
    0, 0,  +1, +1, +1, +1, +1, 0,  0, 0, 0,  +1, +1, +1, +1, 0,  0,
    0, 0,  0,  +1, +1, +1, 0,  0,  0, 0, 0,  0,  +1, +1, 0,  0,  0,
    0, 0,  0,  0,  +1, 0,  0,  0,  0, 0, 0,  0,  0,

    0, -1, -1, -1, -1, -1, -1, -1, 0, 0, -1, -1, -1, -1, -1, -1, 0,
    0, 0,  -1, -1, -1, -1, -1, 0,  0, 0, 0,  -1, -1, -1, -1, 0,  0,
    0, 0,  0,  -1, -1, -1, 0,  0,  0, 0, 0,  0,  -1, -1, 0,  0,  0,
    0, 0,  0,  0,  -1, 0,  0,  0,  0, 0, 0,  0,  0

};

// used by node128
static const int16_t update_16_16[16 * 16 * 2] ALIGNEMENT = {

    +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, 0,  +1, +1,
    +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, 0,  0,  +1, +1, +1, +1,
    +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, 0,  0,  0,  +1, +1, +1, +1, +1, +1,
    +1, +1, +1, +1, +1, +1, +1, 0,  0,  0,  0,  +1, +1, +1, +1, +1, +1, +1, +1,
    +1, +1, +1, +1, 0,  0,  0,  0,  0,  +1, +1, +1, +1, +1, +1, +1, +1, +1, +1,
    +1, 0,  0,  0,  0,  0,  0,  +1, +1, +1, +1, +1, +1, +1, +1, +1, +1, 0,  0,
    0,  0,  0,  0,  0,  +1, +1, +1, +1, +1, +1, +1, +1, +1, 0,  0,  0,  0,  0,
    0,  0,  0,  +1, +1, +1, +1, +1, +1, +1, +1, 0,  0,  0,  0,  0,  0,  0,  0,
    0,  +1, +1, +1, +1, +1, +1, +1, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  +1,
    +1, +1, +1, +1, +1, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  +1, +1, +1,
    +1, +1, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  +1, +1, +1, +1, 0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  +1, +1, +1, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  +1, +1, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  +1,

    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  0,  -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, -1, -1, -1, 0,  0,  0,  0,  -1, -1, -1, -1, -1, -1, -1, -1,
    -1, -1, -1, -1, 0,  0,  0,  0,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1,
    -1, 0,  0,  0,  0,  0,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,
    0,  0,  0,  0,  0,  -1, -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  0,  0,  0,
    0,  0,  0,  -1, -1, -1, -1, -1, -1, -1, -1, 0,  0,  0,  0,  0,  0,  0,  0,
    0,  -1, -1, -1, -1, -1, -1, -1, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  -1,
    -1, -1, -1, -1, -1, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  -1, -1, -1,
    -1, -1, 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  -1, -1, -1, -1, 0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  -1, -1, -1, 0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  -1, -1, 0,  0,  0,  0,  0,  0,  0,
    0,  0,  0,  0,  0,  0,  0,  0,  -1

};

}  // namespace dyrs::tables::avx2